{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Experimental library</p> <p>This library is author's development for usage in self projects that he published for open source  community. It is not production-ready solution. It is ready for your experiments and  contribution. Don't think that everything works fine, it was not tested as well</p>"},{"location":"#what-is-yandex-mapkit-kmp-project","title":"What is Yandex MapKit KMP project?","text":"<p>Kotlin-first SDK for Yandex MapKit. It's API is similar to the Yandex MapKit SDK but also supports multiplatform projects and compose multiplaform, enabling you to use MapKit directly from your common source targeting iOS or Android.</p> <p>Info</p> <p>It is not Yandex's project. Author has no connection with original SDK, it is wrapper above official Yandex MapKit SDK. Official YMK documentation page: https://yandex.ru/dev/mapkit/doc/</p>"},{"location":"#api-coverage","title":"API coverage","text":"<ul> <li>Yandex MapKit lite version<ul> <li><code>MapKit</code>, <code>MapView</code>, <code>MapWindow</code>, <code>Map</code>, <code>MapObject</code>s, <code>Geometry</code>s, <code>Logo</code>, <code>CameraPosition</code> and etc</li> <li><code>LocationManager</code> and <code>UserLocationLayer</code></li> <li>Different event listeners and callbacks</li> <li><code>ImageProvider</code></li> </ul> </li> <li>Composable <code>YandexMap</code><ul> <li>Drawing <code>MapView</code> using Compose Multiplatform</li> <li>Control Camera Position</li> <li>Compose nodes based drawing map objects like composable functions <code>Placemark</code>, <code>Circle</code>, <code>Polygon</code>, <code>Polyline</code></li> <li>Experimental compose content as <code>Placemark</code>'s image</li> </ul> </li> <li>Not supported yet<ul> <li>Yandex MapKit full version</li> <li>Custom layers</li> <li>Map downloading</li> <li><code>GeoObject</code>s</li> </ul> </li> </ul> <p>Warning</p> <p>Library is under development and not all API is available.</p>"},{"location":"#mission-of-wrapper-with-kmp-support","title":"Mission of wrapper with KMP support","text":"<ul> <li>Ability to write MapKit control in common sources</li> <li>Support for Compose UI with two variants of API</li> <li>Support for multiplatform resources   via moko-resources and   compose multiplatform resource.</li> <li>Not to rewrite official API. Official docs is useful in most   cases for <code>yandex-mapkit-kmp</code> module.</li> <li>Quick migration, just change package name from <code>com.yandex.mapkit</code> to <code>ru.sulgik.mapkit</code>.</li> </ul>"},{"location":"#author","title":"Author","text":"<ul> <li>@SuLG-ik \u2013 main developer. Telegram: @vollllodya</li> </ul>"},{"location":"sample/","title":"Sample app","text":""},{"location":"sample/#sample-app_1","title":"Sample app","text":"<p>The sample project is a app that show some library usage flow. It is rewritten official yandex mapkit example. It has Android and IOS build, but all code is in common code.</p> <p>To run sample app you should provide your API key using <code>local.properties</code></p> local.properties <pre><code>MAPKIT_API_KEY=&lt;API-KEY&gt;\n</code></pre>"},{"location":"compose/image-resources/","title":"Image resources","text":"<p>Placemarks and clusters require image to draw it on map. MapKit use <code>ImageProvider</code> to providing image to Map</p>"},{"location":"compose/image-resources/#compose-multiplatform","title":"Compose Multiplatform","text":"<p>Requires <code>yandex-mapkit-kmp-compose</code></p>"},{"location":"compose/image-resources/#multiplatform-resources-usage","title":"Multiplatform Resources usage","text":"<p>You can use generated <code>Res</code> to creating <code>ImageProvider</code> in composable context directly with:</p> Kotlin <pre><code>@Composable\npublic fun imageProvider(resource: DrawableResource): ImageProvider\n</code></pre> <p>Usage example:</p> Kotlin <pre><code>@Composable\nfun MapScreen() {\n    //...\n    val clusterImage = imageProvider(Res.drawable.cluster)\n    // ...\n}\n</code></pre>"},{"location":"compose/image-resources/#composable-as-imageprovider","title":"Composable as imageProvider","text":"<p>Experimental API marked as <code>@YandexMapsComposeExperimentalApi</code>.</p> <p>This API contains many limitations and different behaviour on platforms. Highly not recommended to use, require help by community to improve rendering on iOS and API in general.</p> <p>Function to creating ImageProvider via composable content.</p> <p>In this case exists some limitations:</p> <ul> <li>It does not composing content all of the time. It take a single snapshot and use it as    ImageProvider.</li> <li>Parameter size is ignored on Android. On iOS it is used as content size to take a snapshot.   Will be remove in the future after finding another way to render composable content to snapshot.</li> <li>To recreate ImageProvider, content, size or keys (in other variants of this function) should be    changed</li> </ul> Kotlin <pre><code>@YandexMapsComposeExperimentalApi\n@Composable\npublic expect fun imageProvider(\n    size: DpSize,\n    content: @Composable () -&gt; Unit\n): ImageProvider\n</code></pre> <p>Usage example. Content is drawn as rounding rectangle with text content of clicks count.</p> Kotlin <pre><code>@Composable\nfun MapScreen() {\n    var clicksCount by remember { mutableStateOf(0) }\n    val density = LocalDensity.current\n    val contentSize = with(density) { DpSize(75.dp, 10.dp + 12.sp.toDp()) }\n    val clicksImageProvider = imageProvider(size = contentSize, clicksCount) {\n      Box(\n          modifier = Modifier\n          .background(Color.LightGray, MaterialTheme.shapes.medium)\n          .border(\n              1.dp,\n              MaterialTheme.colorScheme.outline,\n              MaterialTheme.shapes.medium\n          )\n          .padding(vertical = 5.dp, horizontal = 10.dp)\n      ) {\n            Text(\"clicks: $clicksCount\", fontSize = 12.sp)\n      }\n    }\n}\n</code></pre>"},{"location":"compose/image-resources/#moko-resources-compose","title":"Moko-resources compose","text":"<p>Requires <code>yandex-mapkit-kmp-moko-compose</code></p> <p><code>yandex-mapkit-kmp-moko-compose</code> module that add supporting for using image resources generated via moko-resources as ImageProvider with compose multiplatform integration.</p> <p>Add <code>rememberMOKOImageLoader()</code> that provides platform-specific implementations for <code>MOKOImageLoader</code>. Does not require additional configuration.</p> <p>You can create <code>MOKOImageLoader</code> in common source in composable context</p> Kotlin <pre><code>@Composable\nfun MapScreen() {\n  val mokoImageLoader = rememberMOKOImageLoader()\n  val clusterImageProvider = remember { mokoImageLoader.fromResource(MR.images.cluster) }\n}\n</code></pre>"},{"location":"compose/mapobjects/","title":"Map objects","text":"<p>Adding map objects depends on API type that you use.</p>"},{"location":"compose/mapobjects/#first-states-api","title":"First. States API.","text":"<p>It's use <code>YandexMap()</code> as States API you is able to add map objects using composable context</p>"},{"location":"compose/mapobjects/#single-map-objects","title":"Single map objects","text":"<p><code>YandexMap()</code> composable has <code>content</code> parameter that's run as different composition context  with own nodes marked as <code>@YandexMapComposable</code>. That's mean that you is not able to place Compose UI components here, only components supported by <code>YandexMap</code>.</p> <p>List of supported nodes:</p> <ul> <li>Placemark</li> <li>Circle</li> <li>Polygon</li> <li>Polyline</li> </ul> PlacemarkCirclePolylinePolygon <pre><code>val placemarkGeometry = Point(/* */)\n\n@Composable\nfun MapScreen() {\n    val cameraPositionState = rememberCameraPositionState { position = startPosition }\n    YandexMap(\n        cameraPositionState = cameraPositionState,\n        modifier = Modifier.fillMaxSize(),\n    ) {\n        val imageProvider = imageProvider(Res.drawable.pin_red) // Using compose multiplatform resources\n        Placemark(\n            state = rememberPlacemarkState(placemarkGeometry),\n            icon = imageProvider,\n        )\n    }\n}\n</code></pre> <pre><code>val circleGeometry = Circle(/* */)\n\n@Composable\nfun MapScreen() {\n    val cameraPositionState = rememberCameraPositionState { position = startPosition }\n    YandexMap(\n        cameraPositionState = cameraPositionState,\n        modifier = Modifier.fillMaxSize(),\n    ) {\n        Circle(\n            state = rememberCircleState(circleGeometry),\n            color =  Color.Red.copy(alpha = 0.6f), // optional\n        )\n    }\n}\n</code></pre> <pre><code>val polylineGeometry = Polyline(/* */)\n\n@Composable\nfun MapScreen() {\n    val cameraPositionState = rememberCameraPositionState { position = startPosition }\n    YandexMap(\n        cameraPositionState = cameraPositionState,\n        modifier = Modifier.fillMaxSize(),\n    ) {\n        Polyline(\n            state = rememberPolylineState(polylineGeometry),\n            outlineColor = Color.DarkGray.copy(alpha = 0.4f), // optional\n            strokeColor = Color.Gray.copy(alpha = 0.4f), // optional\n        )\n    }\n}\n</code></pre> <pre><code>val polgygonGeometry = Polyline(/* */)\n\n@Composable\nfun MapScreen() {\n    val cameraPositionState = rememberCameraPositionState { position = startPosition }\n    YandexMap(\n        cameraPositionState = cameraPositionState,\n        modifier = Modifier.fillMaxSize(),\n    ) {\n        Polygon(\n            state = rememberPolygonState(polgygonGeometry),\n            outlineColor = Color.DarkGray.copy(alpha = 0.4f), // optional\n            strokeColor = Color.Gray.copy(alpha = 0.4f), // optional\n        )\n    }\n}\n</code></pre>"},{"location":"compose/mapobjects/#clustering","title":"Clustering","text":"<p>Clustering is feature to group multiple Placemark.</p> Single groupMultiple groups <pre><code>val placemarks: List&lt;Point&gt; = /* */\n\n@Composable\nfun MapScreen() {\n    val cameraPositionState = rememberCameraPositionState { position = startPosition }\n    val pinRedImageProvider = imageProvider(Res.drawable.pin_red)\n    val clusterImageProvider = imageProvider(Res.drawable.cluster)\n\n    YandexMap(\n        cameraPositionState = cameraPositionState,\n        modifier = Modifier.fillMaxSize(),\n    ) {\n        Clustering(\n            group = ClusterGroup(\n                placemarks = redPlacemarks,\n                icon = pinRedImageProvider,\n            ),\n            icon = clusterImageProvider,\n        )\n    }\n}\n</code></pre> <pre><code>val redPlacemarks: List&lt;Point&gt; = /* */\nval greenPlacemarks: List&lt;Point&gt; = /* */\nval yellowPlacemarks: List&lt;Point&gt; = /* */\n\n@Composable\nfun MapScreen() {\n    val cameraPositionState = rememberCameraPositionState { position = startPosition }\n    val pinRedImageProvider = imageProvider(Res.drawable.pin_red)\n    val pinGreenImageProvider = imageProvider(Res.drawable.pin_green)\n    val pinYellowImageProvider = imageProvider(Res.drawable.pin_yellow)\n    val clusterImageProvider = imageProvider(Res.drawable.cluster)\n\n    YandexMap(\n        cameraPositionState = cameraPositionState,\n        modifier = Modifier.fillMaxSize(),\n    ) {\n        Clustering(\n            groups = persistentListOf(\n                ClusterGroup(\n                    placemarks = redPlacemarks,\n                    icon = pinRedImageProvider,\n                ),\n                ClusterGroup(\n                    placemarks = greenPlacemarks,\n                    icon = pinGreenImageProvider,\n                ),\n                ClusterGroup(\n                    placemarks = yellowPlacemarks,\n                    icon = pinYellowImageProvider,\n                ),\n            ),\n            icon = clusterImageProvider,\n        )\n    }\n}\n</code></pre>"},{"location":"compose/mapobjects/#second-controller-api","title":"Second. Controller API.","text":""},{"location":"compose/mapobjects/#single-map-objects_1","title":"Single map objects","text":"<p>You can use <code>MapControllerEffect</code> on your <code>YandexMapController</code> instance to add map objects.</p> <p>Effect will be launched once with initialized non-null <code>MapWindow</code> instance. For more info follow official documentation. Use <code>MapWindow.map.mapObjects</code> to add new map object.</p> PlacemarkMapObjectCircleMapObjectPolylineMapObjectPolygonMapObject <pre><code>val placemarkGeometry = Point(/* */)\n@Composable\nfun MapScreen() {\n    val mapController = rememberYandexMapController()\n    val pinGreenImage = imageProvider(Res.drawable.pin_green)\n    MapControllerEffect(mapController) { mapWindow -&gt;\n        mapWindow.map.mapObjects.addPlacemark().apply {\n            geometry = placemarkGeometry\n            setIcon(pinGreenImage)\n        }\n    }\n    YandexMap(\n        controller = mapController,\n        modifier = Modifier.fillMaxSize(),\n    )\n}\n</code></pre> <pre><code>val circleGeometry = Circle(/* */)\n@Composable\nfun MapScreen() {\n    val mapController = rememberYandexMapController()\n    MapControllerEffect(mapController) { mapWindow -&gt;\n        mapWindow.map.mapObjects.addCircle(circleGeometry)\n    }\n    YandexMap(\n        controller = mapController,\n        modifier = Modifier.fillMaxSize(),\n    )\n}\n</code></pre> <pre><code>val polylineGeometry = Polyline(/* */)\n@Composable\nfun MapScreen() {\n    val mapController = rememberYandexMapController()\n    MapControllerEffect(mapController) { mapWindow -&gt;\n        mapWindow.map.mapObjects.addPolyline(polylineGeometry)\n    }\n    YandexMap(\n        controller = mapController,\n        modifier = Modifier.fillMaxSize(),\n    )\n}\n</code></pre> <pre><code>val polygonGeometry = Polygon(/* */)\n@Composable\nfun MapScreen() {\n    val mapController = rememberYandexMapController()\n    MapControllerEffect(mapController) { mapWindow -&gt;\n        mapWindow.map.mapObjects.addPolygon(polygonGeometry)\n    }\n    YandexMap(\n        controller = mapController,\n        modifier = Modifier.fillMaxSize(),\n    )\n}\n</code></pre>"},{"location":"compose/mapobjects/#clustering_1","title":"Clustering","text":"<p>You can use <code>MapControllerEffect</code> on your <code>YandexMapController</code> instance to add Placemarks.</p> <p>Effect will be launched once with initialized non-null <code>MapWindow</code> instance. For more info follow official documentation. Use <code>MapWindow.map.mapObjects</code> to add new map object.</p> Kotlin <pre><code>val placemarks: List&lt;Pair&lt;Point, MapObjectUserData&gt;&gt; = /* */ \n@Composable\nfun MapScreen() {\n    val pinRedImageProvider = imageProvider(Res.drawable.pin_red)\n    val pinGreenImageProvider = imageProvider(Res.drawable.pin_green)\n    val pinYellowImageProvider = imageProvider(Res.drawable.pin_yellow)\n    val clusterImageProvider = imageProvider(Res.drawable.cluster)\n    val mapController = rememberYandexMapController()\n    MapControllerEffect(mapController) { mapWindow -&gt;\n        val typeToImageMap = mapOf(\n            MapObjectType.YELLOW to pinYellowImage,\n            MapObjectType.RED to pinRedImage,\n            MapObjectType.GREEN to pinGreenImage\n        )\n        val cluster =\n            mapWindow.map.mapObjects.addClusterizedPlacemarkCollection(clusterListener)\n        placemarks.forEach { (point, data) -&gt;\n            cluster.addPlacemark().apply {\n                geometry = point\n                setIcon(typeToImageMap[data.type]!!)\n                userData = data\n                addTapListener(mapObjectTapListener)\n            }\n        }\n        cluster.clusterPlacemarks(60.0, 15)\n    }}\n    YandexMap(\n        controller = mapController,\n        modifier = Modifier.fillMaxSize(),\n    )\n}\n</code></pre>"},{"location":"compose/overview/","title":"Compose overview","text":"<p><code>yandex-mapkit-kmp-compose</code> module contains features to draw map in your common code using Compose Multiplatform. It contains two variants of API.</p>"},{"location":"compose/overview/#first-states-api","title":"First. States API.","text":"<p>It's use <code>YandexMap()</code> composable function draw map and composition context to add MapObjects. All map configuration pass to <code>YandexMap()</code> and nested objects using compose runtime.</p>"},{"location":"compose/overview/#simple-setup","title":"Simple setup","text":"<p><code>YandexMap()</code> composable creates MapView instance in place and draw using compose platform interop features. <code>CameraPositionState</code> control it's map instance.</p> Kotlin <pre><code>@Composable\nfun MapScreen() {\n    rememberAndInitializeMapKit().bindToLifecycleOwner() // if is not called earlier\n    val cameraPositionState = rememberCameraPositionState { position = startPosition }\n    YandexMap(\n        cameraPositionState = cameraPositionState,\n        modifier = Modifier.fillMaxSize()\n    )\n}\n</code></pre> <p><code>CameraPositionState</code> can't be provided to multiple <code>YandexMap</code>s</p>"},{"location":"compose/overview/#configure-map","title":"Configure map","text":"<p>States API provides <code>MapConfig</code> type to configure <code>Map</code> object.</p> <p>If <code>MapConfig</code>'s property is null, it's use MapKit built-in value</p> Kotlin <pre><code>@Composable\nfun MapScreen() {\n    // ...\n    val cameraPositionState = rememberCameraPositionState { position = startPosition }\n    YandexMap(\n        cameraPositionState = cameraPositionState,\n        config = MapConfig(\n            isNightModeEnabled = isSystemInDarkTheme(),\n            poiLimit = 5,\n            isFastTapEnabled = null,\n            isRotateGesturesEnabled = false,\n            isTiltGesturesEnabled = false,\n            isScrollGesturesEnabled = false,\n            isZoomGesturesEnabled = true,\n            mapType = null,\n            use2dMode = true,\n            logo = MapLogoConfig(\n                alignment = LogoAlignment(\n                    horizontal = LogoHorizontalAlignment.LEFT,\n                    vertical = LogoVerticalAlignment.TOP,\n                ),\n            ),\n        ),\n        modifier = Modifier.fillMaxSize(),\n    )\n}\n</code></pre>"},{"location":"compose/overview/#advanced-map-effect","title":"Advanced. Map effect","text":"<p>States API useful in different cases and might be useful in most simple cases. But if necessary  API is not covered with it you is able to use <code>MapEffect</code>.</p> <p><code>MapEffect</code> marked as <code>@YandexMapComposable</code> and can be launched only from <code>YandexMap</code> content. <code>MapEffect</code> provides <code>Map</code> instance that is used in <code>YandexMap</code></p> Kotlin <pre><code>@Composable\nfun MapScreen() {\n    val cameraPositionState = rememberCameraPositionState { position = startPosition }\n    YandexMap(\n        cameraPositionState = cameraPositionState,\n        modifier = Modifier.fillMaxSize(),\n    ) {\n        MapEffect { map -&gt;\n            map.move(startPosition)\n        }\n    }\n}\n</code></pre>"},{"location":"compose/overview/#second-controller-api","title":"Second. Controller API.","text":""},{"location":"compose/overview/#simple-setup_1","title":"Simple setup","text":"<p>It's use <code>YandexMap()</code> composable function draw map. It receives YandexMapController that control map using common providing MapWindow instance via controller .</p> <p>It is not use compose runtime to control map. It provide instance of <code>MapWindow</code>  via <code>YandexMapController.mapWindow</code>.</p> <p><code>YandexMapController.mapWindow</code> is null if it is not created by YandexMap yet</p> Kotlin <pre><code>@Composable\nfun MapScreen() {\n    rememberAndInitializeMapKit().bindToLifecycleOwner() // if is not called earlier\n    val mapController = rememberYandexMapController()\n    YandexMap(\n        controller = mapController,\n        modifier = Modifier.fillMaxSize(),\n    )\n}\n</code></pre>"},{"location":"compose/overview/#configure-controller","title":"Configure controller","text":"<p>Effect that receives created YandexMapController instance and launched only if <code>MapWindow</code> created. Useful to setup controller.</p> <p>Provided <code>MapWindow</code> instance is non-null value</p> Kotlin <pre><code>@Composable\nfun MapScreen() {\n    //...\n    val mapController = rememberYandexMapController()\n    MapControllerEffect(mapController) { mapWindow -&gt;\n        mapWindow.map.move(startPosition)\n        mapWindow.map.isZoomGesturesEnabled = true\n    }\n    YandexMap(\n        controller = mapController,\n        modifier = Modifier.fillMaxSize(),\n    )\n}\n</code></pre>"},{"location":"compose/underthehood/","title":"Compose under the hood","text":""},{"location":"getting-started/contributing/","title":"Contributing","text":""},{"location":"getting-started/contributing/#required","title":"Required","text":"<ul> <li>macOS</li> <li>Cocoapods</li> <li>Android studio</li> </ul>"},{"location":"getting-started/contributing/#sample","title":"Sample","text":"<p>To run sample you should provide your API key using <code>local.properties</code></p> local.properties <pre><code>MAPKIT_API_KEY=&lt;API-KEY&gt;\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Yandex MapKit KMP provides a number of modules, they are all published to Maven Central Repository.</p> <p>Uses Yandex MapKit SDK version 4.24.0-lite</p> Module Gradle Dependency Description Wrapper <code>ru.sulgik.mapkit:yandex-mapkit-kmp:0.4.1</code> Features of original Yandex MapKit SDK Compose <code>ru.sulgik.mapkit:yandex-mapkit-kmp-compose:0.4.1</code> Component to draw map and compose-resources usage as map images Moko <code>ru.sulgik.mapkit:yandex-mapkit-kmp-moko:0.4.1</code> Use moko-resources as image provider. Requires native initialization Moko Compose <code>ru.sulgik.mapkit:yandex-mapkit-kmp-moko-compose:0.4.1</code> Use moko-resources as image provider in composable context. Not require native initialization"},{"location":"getting-started/installation/#wrapper-the-main-module","title":"Wrapper. The main module","text":"<p><code>yandex-mapkit-kmp</code> module is wrapper for YandexMapKit compose that provides official Yandex MapKit features to common sources.</p> <p>It provides KMP Api for:</p> <ul> <li><code>MapKit</code>, <code>MapView</code>, <code>MapWindow</code>, <code>Map</code>, <code>MapObject</code>s, <code>Geometry</code>s, <code>Logo</code>, <code>CameraPosition</code> and etc</li> <li><code>LocationManager</code> and <code>UserLocationLayer</code></li> <li>Different event listeners and callbacks</li> <li>Common <code>ImageProvider</code></li> </ul> <p>This module can be implemented as library for common sources set.</p> Kotlin <pre><code>kotlin {\n    cocoapods {\n        pod(\"YandexMapsMobile\") {\n          version = \"&lt;mapkit-version&gt;\"\n        }\n    }\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"ru.sulgik.mapkit:yandex-mapkit-kmp:&lt;version&gt;\")\n        }\n    }\n}\n</code></pre> <p>Warning</p> <p>On iOS the official Yandex MapKit SDK in not linked as a transitive dependency. Therefore, any project using this SDK needs to link the same Yandex MapKit SDK as well. This can be done through your preferred installation method (Cocoapods/SPM).</p>"},{"location":"getting-started/installation/#compose-mapview-as-composable-content","title":"Compose. MapView as composable content","text":"<p><code>yandex-mapkit-kmp-compose</code> module that add support for using mapkit with Compose Multiplatform  and Compose Multiplatform Resources.</p> <p>Some supported features:</p> <ul> <li><code>YandexMap</code> to draw <code>MapView</code> in composable context</li> <li><code>Placemark</code>, <code>Circle</code>, <code>Polygon</code>, <code>Polyline</code> and rjelated states.</li> <li><code>CameraPositionState</code> to control camera position</li> <li>Composable content as <code>ImageProvider</code> </li> <li><code>MapEffect</code> to access common <code>Map</code> instance used inside <code>YandexMap</code>.</li> <li>etc.</li> </ul> Kotlin <pre><code>kotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"ru.sulgik.mapkit:yandex-mapkit-kmp-compose:&lt;version&gt;\")\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/installation/#moko-converter-for-moko-resources-to-imageprovider","title":"Moko. Converter for moko-resources to ImageProvider","text":"<p><code>yandex-mapkit-kmp-moko</code> module that add support for using image resources generated  via moko-resources as ImageProvider.</p> <p>Add <code>MOKOImageLoader</code> and platform-specific implementations (<code>AndroidMOKOImageLoader</code>  and <code>IOSMOKOImageLoader</code>). Require additional configuration to provide implementations.</p> Kotlin <pre><code>kotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"ru.sulgik.mapkit:yandex-mapkit-kmp-moko:&lt;version&gt;\")\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/installation/#moko-compose-converter-for-moko-resources-to-imageprovider-with-compose-supporting","title":"Moko Compose. Converter for moko-resources to ImageProvider with compose supporting","text":"<p><code>yandex-mapkit-kmp-moko-compose</code> module that add supporting for using image resources generated  via moko-resources as ImageProvider  with compose multiplatform integration.</p> <p>Add <code>rememberMOKOImageLoader()</code> that provides platform-specific implementations for  <code>MOKOImageLoader</code>. Does not require additional configuration.</p> Kotlin <pre><code>kotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"ru.sulgik.mapkit:yandex-mapkit-kmp-moko-compose:&lt;version&gt;\")\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/licence/","title":"Licence","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>\u00a9 You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright 2024 Vladimir Nenashkin</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"getting-started/quick-start/","title":"Quick start","text":""},{"location":"getting-started/quick-start/#setup-api-key","title":"Setup API key","text":"<p>Add initializing MapKit with API key in common module. Follow  official documentation  to get API key.</p> Kotlin <pre><code>// In common module\nfun initMapKit() {\n    MapKit.setApiKey(\"&lt;API_KEY&gt;\")\n}\n</code></pre> <p>Suggestion</p> <p>You can use BuildKonfig to provide API key during app building.</p> <p>And call this function from entry point of your platform.</p> <p>Android sources</p> Kotlin <pre><code>class MyApplication : Application {\n    override fun onCreate() {\n        super.onCreate()\n        initMapKit()\n    }\n}\n</code></pre> <p>or other entry point, see Android MapKit official documentation</p> <p>IOS sources</p> Swift <pre><code>@main\nstruct iOSApp: App {\n    init() {\n        AppKt.doInitMapKit()\n    }\n    // Your code here   \n}\n</code></pre> <p>or other entry point, see iOS MapKit official documentation</p>"},{"location":"getting-started/quick-start/#initialization","title":"Initialization","text":"<p>MapKit, by and large, must be initialized via native library loading and lifecycle binding. There three ways to initialize. You can mix methods, but be careful to not repeat completed actions.</p>"},{"location":"getting-started/quick-start/#1-in-native-android-sources","title":"1. In native android sources","text":"<p>Call <code>MapKit.initialize(Context)</code> in your activity in android module and bind lifecycle.  Additional configuration for iOS is not required.</p> Kotlin <pre><code>class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        MapKit.initialize(this)\n        /* ... */\n    }\n\n    override fun onStart() {\n        super.onStart()\n        MapKit.getInstance().onStart()\n    }\n\n    override fun onStop() {\n        super.onStop()\n        MapKit.getInstance().onStop()\n    }\n\n}\n</code></pre>"},{"location":"getting-started/quick-start/#2-in-common-code","title":"2. In common code","text":"<p>Requires <code>yandex-mapkit-kmp-compose</code></p> <p>Call 'rememberAndInitializeMapKit()' and call <code>MapKit.bindToLifecycleOwner()</code> in your compose screen.</p> <p>Important</p> <p><code>MapKit.rememberAndInitializeMapKit()</code> is difficult operation, use <code>MapKit.rememberMapKit()</code> if you already initialize MapKit via other method or early</p> <p>call <code>MapKit.bindToLifecycleOwner()</code> in composition context, which disposing means to stop MapKit* **</p> Kotlin <pre><code>@Composable\nfun MapScreen() {\n    rememberAndInitializeMapKit().bindToLifecycleOwner()\n    /* ... */\n}\n</code></pre>"},{"location":"getting-started/quick-start/#3-in-common-code","title":"3. In common code","text":"<p>All supported native types have extension functions (<code>&lt;NativeType&gt;.toCommon(): &lt;CommonType&gt;</code>), use it to pass exists native MapView to common code like:  <code>MapWindow.toCommon()</code>/<code>YMKMapWindow.toCommon()</code>, <code>Map.toCommon()</code>/<code>YMKMap.toCommon()</code> and etc. Follow official documentation to setup native view.</p> <p>Also there are methods to convert <code>&lt;CommonType&gt;</code> to <code>&lt;NativeType&gt;</code> that available in  platform-specific source code (<code>&lt;CommonType&gt;.toNative(): &lt;NativeType&gt;</code>): <code>MapWindow.toNative()</code>, <code>Map.toNative()</code> and etc.</p>"},{"location":"getting-started/quick-start/#add-map-using-compose-multiplatform","title":"Add map using Compose Multiplatform","text":"<p>Requires <code>yandex-mapkit-kmp-compose</code></p> <p>There are two compose API to control <code>Map</code>. Most simple and useful in most cases, but with  less performance using composable composition and states:</p> Kotlin <pre><code>@Composable\nfun MapScreen() {\n    rememberAndInitializeMapKit().bindToLifecycleOwner() // if is not called earlier\n    val cameraPositionState = rememberCameraPositionState { position = startPosition }\n    YandexMap(\n        cameraPositionState = cameraPositionState,\n        modifier = Modifier.fillMaxSize()\n    )\n}\n</code></pre>"},{"location":"wrapper/image-resources/","title":"Image resources","text":"<p>Placemarks and clusters require image to draw it on map. MapKit use <code>ImageProvider</code> to providing image to Map</p>"},{"location":"wrapper/image-resources/#wrapper-only-usage","title":"Wrapper-only usage","text":"<p>Library wrap <code>ImageProvider</code> as empty interface for common source. But in platform-specific source set there are some methods for converting native image containers like <code>Bitmap</code>, drawable resource, assets or <code>UIImage</code> to ImageProvider.</p> <p>You should organize logic for creating <code>ImageProvider</code>s in platform-specific source and passing  them to common code</p> <p>Android source</p> DrawableBitmapAssetFile <pre><code>val clusterImageProvider = ImageProvider.fromResource(context, R.drawable.ic_cluster)\n</code></pre> <pre><code>val clusterImageProvider = clusterBitmap.toImageProvider()\nval cluster2ImageProvider = ImageProvider.fromBitmap(bitmap)\n</code></pre> <pre><code>val clusterImageProvider = ImageProvider.fromAsset(context, \"cluster_asset\")\n</code></pre> <pre><code>val clusterImageProvider = ImageProvider.fromFile(context, \"cluster_filename\")\n</code></pre> <p>MapKit has images caching feature and wrapper support it too</p> <p>IOS source</p> UIImage <pre><code>val clusterImageProvider = ImageProvider.fromUIImage(uiimage)\n</code></pre>"},{"location":"wrapper/image-resources/#moko-resources","title":"Moko-resources","text":"<p>Requires <code>andex-mapkit-kmp-moko</code></p> <p><code>yandex-mapkit-kmp-moko</code> module add supporting for using image resources generated via moko-resources as ImageProvider.</p> <p>Add <code>MOKOImageLoader</code> and platform-specific implementations (<code>AndroidMOKOImageLoader</code> and <code>IOSMOKOImageLoader</code>). Require additional configuration to provide implementations.</p> <p>You should create instances of <code>MOKOImageLoader</code> in platform-specific code and provide it to your  common part using direct parameter passing or DI. </p> <p>Android implementation require <code>Context</code> instance, but ios does not require it. On iOS you can  create function function with no <code>MOKOImageLoader</code> parameter passing and call it from your map  control logic entry point.</p> AndroidiOScommon <pre><code>class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val map: Map = /* ... */\n        val mokoImageLoader: MOKOImageLoader = AndroidMOKOImageLoader(context)\n        setupMap(map, mokoImageLoader)\n        /* ... */\n    }\n</code></pre> <pre><code>fun setupMap(map: Map) {\n    setupMap(map, IOSMOKOImageLoader())\n}\n</code></pre> <pre><code>fun setupMap(map: Map, mokoImageLoader: MOKOImageLoader) {\n    val clusterImageProvider = mokoImageLoader.fromResource(MR.images.cluster)\n}\n</code></pre>"},{"location":"wrapper/overview/","title":"Wrapper overview","text":"<p><code>yandex-mapkit-kmp</code> is main module to control Yandex MapKit from common code.</p>"},{"location":"wrapper/overview/#usage-cases","title":"Usage cases","text":"<p><code>yandex-mapkit-kmp</code> module is not provide any abilities to draw map on your platform. It is provide  only common wrapper in common code and actual implementations for Android and iOS targets.</p> <p>You should create <code>MapView</code> on your platform and provide common instance to your map control logic in common code by converting platform-specific type to common using <code>&lt;NativeType&gt;.toCommon()</code> extension method.</p> <p>Example</p> <p>All supporting platform-native types has converters to common types</p> Kotlin commonMainKotlin androidMain <pre><code>fun setupMap(map: ru.sulgik.mapkit.map.Map) {\n    map.move(startPosition)\n}\n</code></pre> <pre><code>class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        // ...\n        val mapView: com.yandex.mapkit.mapview.MapView = /* findViewById(), for example */\n        setupMap(mapView.mapWindow.map.toCommon())\n    }\n}\n</code></pre>"},{"location":"wrapper/overview/#migrate-your-android-sources-to-common","title":"Migrate your Android sources to common.","text":"<p>Library save original MapKit package name parts, class, methods naming in most cases.</p> <ul> <li>Change package name from <code>com.yandex.mapkit</code> to <code>ru.sulgik.mapkit</code> in map control logic.</li> <li>Call <code>&lt;NativeType&gt;.toCommon(): &lt;CommonType&gt;</code> extension method to convert native type to common.</li> <li>Pass common type to your map control logic</li> </ul> <p>Example</p> WasBecame <pre><code>val startPosition = com.yandex.mapkit.map.CameraPosition(/* ... */)\nfun setupMap(map: com.yandex.mapkit.map.Map) {\n    map.move(startPosition)\n}\n</code></pre> <pre><code>val startPosition = ru.sulgik.mapkit.map.CameraPosition(/* ... */)\nfun setupMap(map: ru.sulgik.mapkit.map.Map) {\n    map.move(startPosition)\n}\n</code></pre>"},{"location":"wrapper/underthehood/","title":"Wrapper under the hood","text":""}]}